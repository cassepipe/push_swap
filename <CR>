#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include "libft/get_next_line.h"
#include "checker.h"

bool	check_dll_ordered(t_dllnode **list)
{
	t_dllnode	*node;
	t_dllnode	*next_node;

	if (list && *list)
	{
		node = (*list);
		next_node = (*list)->next;
		while (next_node != *list)
		{
			if (node->num > next_node-> num)
				return (false);
			node = next_node;
			next_node = next_node->next;
		}
	}
	return (true);
}

void	put_dll_ordered(t_dllnode **list)
{
	if (check_dll_ordered(list))
		printf(GREEN "OK" ENDCOLOR "\n");
	else
		printf(RED "KO" ENDCOLOR "\n");
}

int 	main(int argc, char **argv)
{
	t_stack	*A;
	t_stack	*B;
	int		i;
	int		num;

	argv++;
	argc--;
	fat_array = parse_numbers_or_error(argv, argc);
	error_if_duplicates(fat_array, argc);
	A = new_stack(NULL, 0);
	B = new_stack(NULL, 0);
	if (!A || !B)
		return (-1);
	i = 0;
	while (i < argc)
	{
		/*printf("Appending %c\n", **argv);*/
		num = atoi(*argv++);
		i++;
		stack_append(A, dll_new_node(num));
	}
	/*PRINT_TWO_STACKS(A, B);*/
	loop_exec_stack_ops(A, B);
	/*PRINT_TWO_STACKS(A, B);*/
	put_dll_ordered(&A->top);
	free_stack(A);
	free_stack(B);
	return (0);
}
