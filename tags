!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
${NAME}	libft/Makefile	/^${NAME}:		${OBJS} Makefile$/;"	t
-c.o	libft/Makefile	/^-c.o:			$/;"	t
AR	libft/Makefile	/^AR			= 	ar rcs$/;"	m
ATTRIBUT	libft/Makefile	/^ATTRIBUT 	= 	-c$/;"	m
BLACKLIST	Makefile	/^BLACKLIST		=	push_swap.c checker.c $/;"	m
BUFFER_SIZE	libft/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC	  		  	=	clang$/;"	m
CC	libft/Makefile	/^CC			= 	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS			=	-Wall -Wextra  -g3 -pedantic$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS		=	-Werror -Wall -Wextra -g3$/;"	m
ENDCOLOR	checker.h	/^#define ENDCOLOR /;"	d
ENDCOLOR	debug.h	/^#define ENDCOLOR /;"	d
FT_PRINTF_H	libft/ft_printf/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
FT_PRINTF_UTILS_H	libft/ft_printf/ft_printf_utils.h	/^# define FT_PRINTF_UTILS_H$/;"	d
GET_NEXT_LINE_H	libft/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GREEN	checker.h	/^#define GREEN /;"	d
GREEN	debug.h	/^#define GREEN /;"	d
HEADERS	Makefile	/^HEADERS			=	$(wildcard *.h)		$/;"	m
INCLUDES	libft/Makefile	/^INCLUDES		=	libft.h	get_next_line.h	$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME			=	prog$/;"	m
NAME	libft/Makefile	/^NAME			= 	libft.a$/;"	m
OBJECTFILES	Makefile	/^OBJECTFILES		=	$(patsubst %.c,obj\/%.o,$(SOURCEFILES))$/;"	m
OBJS	libft/Makefile	/^OBJS		= 	${SRC:.c=.o}$/;"	m
OPEN_MAX	libft/get_next_line.h	/^#  define OPEN_MAX /;"	d
PHONY	Makefile	/^PHONY			=	all clean fclean re test$/;"	m
PRINT_ARRAY	debug.h	/^#define PRINT_ARRAY(/;"	d
PRINT_ARRAY_HEX	debug.h	/^#define PRINT_ARRAY_HEX(/;"	d
PRINT_FAT_INT_ARRAY	debug.h	/^#define PRINT_FAT_INT_ARRAY(/;"	d
PRINT_TWO_STACKS	debug.h	/^#define PRINT_TWO_STACKS(/;"	d
RED	checker.h	/^#define RED /;"	d
RED	debug.h	/^#define RED /;"	d
RM	libft/Makefile	/^RM			= 	rm -rf$/;"	m
SANITIZER	Makefile	/^SANITIZER		=	-fsanitize=address$/;"	m
SOURCEFILES	Makefile	/^SOURCEFILES		=	$(filter-out ${BLACKLIST}, $(wildcard *.c))$/;"	m
SRC	libft/Makefile	/^SRC			=	ft_atoi.c    			\\$/;"	m
SWAP_BUFFERS	debug.h	/^#define SWAP_BUFFERS(/;"	d
all	Makefile	/^all:			push_swap  checker$/;"	t
all	libft/Makefile	/^all:			${NAME}$/;"	t
arrange_format	libft/ft_printf/format_utils.c	/^void		arrange_format(struct s_parameters *format)$/;"	f	typeref:typename:void
atoi_error	atoi_error.c	/^static int	atoi_error(const char *ptr, bool *error)$/;"	f	typeref:typename:int	file:
bit_sort_pass	bit_sort.c	/^static int	*bit_sort_pass(int *input_array,$/;"	f	typeref:typename:int *	file:
bit_sort_raw	bit_sort.c	/^int	*bit_sort_raw(int *input_array,$/;"	f	typeref:typename:int *
char_repr	libft/ft_printf/repr.c	/^char		*char_repr(unsigned char c,$/;"	f	typeref:typename:char *
check_dll_ordered	checker.c	/^bool	check_dll_ordered(t_dllnode **list)$/;"	f	typeref:typename:bool
check_for_some_order	order.c	/^bool	check_for_some_order(int *array, int nb_items, int min)$/;"	f	typeref:typename:bool
checker	Makefile	/^checker:		obj\/checker.o ${OBJECTFILES} libft\/libft.a$/;"	t
clean	Makefile	/^clean:			$/;"	t
clean	libft/Makefile	/^clean:			$/;"	t
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
count	fat_int_radix_sort.c	/^static void	count(struct fat_int *input_array,$/;"	f	typeref:typename:void	file:
create_positive_array	push_swap.c	/^int	*create_positive_array(struct fat_int *fat_array, int nb_items)$/;"	f	typeref:typename:int *
create_stack_from_int_array	push_swap.c	/^t_stack	*create_stack_from_int_array(int *int_array, int nb_items)$/;"	f	typeref:typename:t_stack *
die	bit_sort.c	/^static void	die(int *to_free)$/;"	f	typeref:typename:void	file:
diralloc	libft/ft_split.c	/^static char			**diralloc(const char *s, char c)$/;"	f	typeref:typename:char **	file:
dll_new_node	dll_operations.c	/^t_dllnode	*dll_new_node(int n)$/;"	f	typeref:typename:t_dllnode *
error	libft/ft_printf/ft_printf_utils.h	/^	int error;$/;"	m	struct:s_parameters	typeref:typename:int
error_if_duplicates	check_duplicates.c	/^void	error_if_duplicates(struct fat_int *array, int nb_items)$/;"	f	typeref:typename:void
fat_int	array_member.h	/^struct fat_int {$/;"	s
fat_int	atoi_error.h	/^struct fat_int {$/;"	s
fat_int	atoi_error.h	/^typedef struct fat_int fat_int;$/;"	t	typeref:struct:fat_int
fat_int	check_duplicates.h	/^struct fat_int {$/;"	s
fat_int	check_duplicates.h	/^typedef struct fat_int fat_int;$/;"	t	typeref:struct:fat_int
fat_int	fat_int_radix_sort.h	/^struct fat_int {$/;"	s
fat_int	fat_int_radix_sort.h	/^typedef struct fat_int fat_int;$/;"	t	typeref:struct:fat_int
fat_int	push_swap.h	/^struct fat_int {$/;"	s
fat_int	push_swap.h	/^typedef struct fat_int fat_int;$/;"	t	typeref:struct:fat_int
fat_int_radix_sort	fat_int_radix_sort.c	/^struct	fat_int	*fat_int_radix_sort(struct fat_int *array, int nb_items)$/;"	f	typeref:struct:fat_int *
fclean	Makefile	/^fclean:			clean$/;"	t
fclean	libft/Makefile	/^fclean:			clean$/;"	t
free_dll	dll_operations.c	/^void	free_dll(t_dllnode **list, int nmemb)$/;"	f	typeref:typename:void
free_stack	stack_utils.c	/^void	free_stack(t_stack *stack)$/;"	f	typeref:typename:void
ft_10powerof	libft/ft_itoa.c	/^static long	ft_10powerof(long n)$/;"	f	typeref:typename:long	file:
ft_10powerof	libft/ft_putnbr_fd.c	/^static long	ft_10powerof(long n)$/;"	f	typeref:typename:long	file:
ft_atoi	libft/ft_atoi.c	/^int			ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_dprintf	libft/ft_printf/ft_dprintf.c	/^int	ft_dprintf(int fd, const char *formatted_string, ...)$/;"	f	typeref:typename:int
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_lutoa_base	libft/ft_printf/ft_lutoa_base.c	/^char					*ft_lutoa_base(unsigned long n, const char *base_str)$/;"	f	typeref:typename:char *
ft_lutoa_format	libft/ft_printf/repr.c	/^static char	*ft_lutoa_format(long nbr, int type)$/;"	f	typeref:typename:char *	file:
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_printf	libft/ft_printf/ft_printf.c	/^int	ft_printf(const char *formatted_string, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_split	libft/ft_split.c	/^char				**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strjoin_and_free	libft/ft_strjoin_and_free.c	/^char	*ft_strjoin_and_free(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *l, const char *r, size_t n)$/;"	f	typeref:typename:int
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f	typeref:typename:char *
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char		*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_vdprintf	libft/ft_printf/ft_vdprintf.c	/^int						ft_vdprintf(int fd, const char *fs, va_list args)$/;"	f	typeref:typename:int
get_next_line	libft/get_next_line.c	/^int			get_next_line(int fd, char **line)$/;"	f	typeref:typename:int
grow_buffer_until_newline	libft/get_next_line.c	/^static int	grow_buffer_until_newline(int fd, char **buffer,$/;"	f	typeref:typename:int	file:
init_format	libft/ft_printf/format_utils.c	/^void		init_format(struct s_parameters *format)$/;"	f	typeref:typename:void
is_in	libft/ft_printf/format_utils.c	/^int			is_in(char c, const char *charset)$/;"	f	typeref:typename:int
is_in_set	libft/ft_strtrim.c	/^static int	is_in_set(char c, char const *set)$/;"	f	typeref:typename:int	file:
is_stack_sorted	stack_utils.c	/^bool	is_stack_sorted(t_stack A)$/;"	f	typeref:typename:bool
leftpad	libft/ft_printf/pad.c	/^void	leftpad(char **str, char c, size_t n)$/;"	f	typeref:typename:void
libft/libft.a	Makefile	/^libft\/libft.a:$/;"	t
loop_exec_stack_ops	checker.c	/^void	loop_exec_stack_ops(t_stack *A, t_stack *B)$/;"	f	typeref:typename:void
main	checker.c	/^int 	main(int argc, char **argv)$/;"	f	typeref:typename:int
main	push_swap.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
min_field_width	libft/ft_printf/ft_printf_utils.h	/^	int	min_field_width;$/;"	m	struct:s_parameters	typeref:typename:int
minus_flag	libft/ft_printf/ft_printf_utils.h	/^	int	minus_flag;$/;"	m	struct:s_parameters	typeref:typename:int
nbr_repr	libft/ft_printf/repr.c	/^char		*nbr_repr(long nbr, struct s_parameters *format, ssize_t *size)$/;"	f	typeref:typename:char *
new_int_array	new_int_array.c	/^int 	*new_int_array(int size)$/;"	f	typeref:typename:int *
new_stack	stack_utils.c	/^t_stack	*new_stack(t_dllnode *top, int size)$/;"	f	typeref:typename:t_stack *
next	checker.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	dll_node.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	dll_operations.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	insertion_sort.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next	push_swap.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	stack_operations.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	stack_rotate.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	stack_sort.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next	stack_utils.h	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
next_sep	libft/ft_split.c	/^static const char	*next_sep(const char *str, char sep)$/;"	f	typeref:typename:const char *	file:
next_word	libft/ft_split.c	/^static const char	*next_word(const char *str, char sep)$/;"	f	typeref:typename:const char *	file:
num	array_member.h	/^	int	num;$/;"	m	struct:fat_int	typeref:typename:int
num	atoi_error.h	/^	int	num;$/;"	m	struct:fat_int	typeref:typename:int
num	check_duplicates.h	/^	int	num;$/;"	m	struct:fat_int	typeref:typename:int
num	checker.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	dll_node.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	dll_operations.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	fat_int_radix_sort.h	/^	int	num;$/;"	m	struct:fat_int	typeref:typename:int
num	insertion_sort.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	push_swap.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	push_swap.h	/^	int	num;$/;"	m	struct:fat_int	typeref:typename:int
num	stack_operations.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	stack_rotate.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	stack_sort.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
num	stack_utils.h	/^	int				num;$/;"	m	struct:s_dllnode	typeref:typename:int
obj	Makefile	/^obj:			$/;"	t
obj/%.o	Makefile	/^obj\/%.o:		%.c	Makefile ${HEADERS} | obj$/;"	t
offset	array_member.h	/^	int	offset;$/;"	m	struct:fat_int	typeref:typename:int
offset	atoi_error.h	/^	int	offset;$/;"	m	struct:fat_int	typeref:typename:int
offset	check_duplicates.h	/^	int	offset;$/;"	m	struct:fat_int	typeref:typename:int
offset	fat_int_radix_sort.h	/^	int	offset;$/;"	m	struct:fat_int	typeref:typename:int
offset	push_swap.h	/^	int	offset;$/;"	m	struct:fat_int	typeref:typename:int
ord	array_member.h	/^	int	ord;$/;"	m	struct:fat_int	typeref:typename:int
ord	atoi_error.h	/^	int	ord;$/;"	m	struct:fat_int	typeref:typename:int
ord	check_duplicates.h	/^	int	ord;$/;"	m	struct:fat_int	typeref:typename:int
ord	fat_int_radix_sort.h	/^	int	ord;$/;"	m	struct:fat_int	typeref:typename:int
ord	push_swap.h	/^	int	ord;$/;"	m	struct:fat_int	typeref:typename:int
pa	print_operations.c	/^void	pa(void)$/;"	f	typeref:typename:void
parse_numbers_or_error	atoi_error.c	/^struct fat_int	*parse_numbers_or_error(char **num_strings, int nb_items)$/;"	f	typeref:struct:fat_int *
parse_sign	atoi_error.c	/^static bool	parse_sign(const char **ptr)$/;"	f	typeref:typename:bool	file:
parse_str_into_format	libft/ft_printf/format_utils.c	/^void		*parse_str_into_format(const char *fs,$/;"	f	typeref:typename:void *
pb	print_operations.c	/^void	pb(void)$/;"	f	typeref:typename:void
precision	libft/ft_printf/ft_printf_utils.h	/^	int	precision;$/;"	m	struct:s_parameters	typeref:typename:int
prev	checker.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	dll_node.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	dll_operations.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	insertion_sort.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	push_swap.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	stack_operations.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	stack_rotate.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	stack_sort.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
prev	stack_utils.h	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode *
print_stack	stack_utils.c	/^void	print_stack(t_stack stack)$/;"	f	typeref:typename:void
print_two_stacks	stack_utils.c	/^void	print_two_stacks(t_stack A, t_stack B)$/;"	f	typeref:typename:void
ptr_repr	libft/ft_printf/repr.c	/^char		*ptr_repr(void *ptr, struct s_parameters *format, ssize_t *size)$/;"	f	typeref:typename:char *
push_swap	Makefile	/^push_swap:		obj\/push_swap.o ${OBJECTFILES} libft\/libft.a$/;"	t
put_dll_ordered	checker.c	/^void	put_dll_ordered(t_dllnode **list)$/;"	f	typeref:typename:void
ra	print_operations.c	/^void	ra(void)$/;"	f	typeref:typename:void
ra_or_pb	bit_sort.c	/^static void	ra_or_pb(unsigned char c)$/;"	f	typeref:typename:void	file:
radix_sort_int_last_pass	fat_int_radix_sort.c	/^static struct fat_int	*radix_sort_int_last_pass(struct fat_int *input_array,$/;"	f	typeref:struct:fat_int *	file:
radix_sort_int_pass	fat_int_radix_sort.c	/^static struct fat_int	*radix_sort_int_pass(struct fat_int *input_array,$/;"	f	typeref:struct:fat_int *	file:
re	Makefile	/^re:				fclean all$/;"	t
re	libft/Makefile	/^re:				fclean all$/;"	t
rightpad	libft/ft_printf/pad.c	/^void	rightpad(char **str, char c, size_t n)$/;"	f	typeref:typename:void
rotate_towards_min	stack_sort.c	/^static void	rotate_towards_min(t_stack *A, int min)$/;"	f	typeref:typename:void	file:
rra	print_operations.c	/^void	rra(void)$/;"	f	typeref:typename:void
s_dllnode	checker.h	/^struct s_dllnode {$/;"	s
s_dllnode	checker.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	dll_node.h	/^typedef	struct	s_dllnode	{$/;"	s
s_dllnode	dll_operations.h	/^struct s_dllnode {$/;"	s
s_dllnode	dll_operations.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	insertion_sort.h	/^struct s_dllnode {$/;"	s
s_dllnode	insertion_sort.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	push_swap.h	/^struct s_dllnode {$/;"	s
s_dllnode	push_swap.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	stack_operations.h	/^struct s_dllnode {$/;"	s
s_dllnode	stack_operations.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	stack_rotate.h	/^struct s_dllnode {$/;"	s
s_dllnode	stack_rotate.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	stack_sort.h	/^struct s_dllnode {$/;"	s
s_dllnode	stack_sort.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_dllnode	stack_utils.h	/^struct s_dllnode {$/;"	s
s_dllnode	stack_utils.h	/^typedef struct s_dllnode s_dllnode;$/;"	t	typeref:struct:s_dllnode
s_list	libft/libft.h	/^typedef struct		s_list$/;"	s
s_parameters	libft/ft_printf/ft_printf_utils.h	/^struct	s_parameters {$/;"	s
s_stack	checker.h	/^struct s_stack {$/;"	s
s_stack	checker.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
s_stack	insertion_sort.h	/^struct s_stack {$/;"	s
s_stack	insertion_sort.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
s_stack	push_swap.h	/^struct s_stack {$/;"	s
s_stack	push_swap.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
s_stack	stack.h	/^typedef struct	s_stack	{$/;"	s
s_stack	stack_operations.h	/^struct s_stack {$/;"	s
s_stack	stack_operations.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
s_stack	stack_rotate.h	/^struct s_stack {$/;"	s
s_stack	stack_rotate.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
s_stack	stack_sort.h	/^struct s_stack {$/;"	s
s_stack	stack_sort.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
s_stack	stack_utils.h	/^struct s_stack {$/;"	s
s_stack	stack_utils.h	/^typedef struct s_stack s_stack;$/;"	t	typeref:struct:s_stack
sa	print_operations.c	/^void	sa(void)$/;"	f	typeref:typename:void
size	checker.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	insertion_sort.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	push_swap.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	stack.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	stack_operations.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	stack_rotate.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	stack_sort.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
size	stack_utils.h	/^	int size;$/;"	m	struct:s_stack	typeref:typename:int
stack_append	stack_operations.c	/^t_stack	*stack_append(t_stack *stack, t_dllnode *node)$/;"	f	typeref:typename:t_stack *
stack_find	stack_sort.c	/^static int	stack_find(t_stack stack, int num)$/;"	f	typeref:typename:int	file:
stack_pop	stack_operations.c	/^t_dllnode	*stack_pop(t_stack *stack)$/;"	f	typeref:typename:t_dllnode *
stack_poppush	stack_operations.c	/^void	stack_poppush(t_stack *src, t_stack *dst)$/;"	f	typeref:typename:void
stack_push	stack_operations.c	/^void	stack_push(t_stack *stack, t_dllnode *node)$/;"	f	typeref:typename:void
stack_rev_find	stack_sort.c	/^static int	stack_rev_find(t_stack stack, int num)$/;"	f	typeref:typename:int	file:
stack_revrotate	stack_rotate.c	/^void	stack_revrotate(t_stack *stack)$/;"	f	typeref:typename:void
stack_rotate	stack_rotate.c	/^void	stack_rotate(t_stack *stack)$/;"	f	typeref:typename:void
stack_sort	stack_sort.c	/^void 	stack_sort(t_stack *A, int min)$/;"	f	typeref:typename:void
stack_swaptop	stack_operations.c	/^void	stack_swaptop(t_stack *stack)$/;"	f	typeref:typename:void
str_repr	libft/ft_printf/repr.c	/^char		*str_repr(char *s, struct s_parameters *format, ssize_t *size)$/;"	f	typeref:typename:char *
swap_buffers	bit_sort.c	/^static void	swap_buffers(int **buff1, int **buff2)$/;"	f	typeref:typename:void	file:
swap_buffers	fat_int_radix_sort.c	/^static void	swap_buffers(struct fat_int **buff1, struct fat_int **buff2)$/;"	f	typeref:typename:void	file:
t_dllnode	checker.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	dll_node.h	/^} t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	dll_operations.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	insertion_sort.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	push_swap.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	stack_operations.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	stack_rotate.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	stack_sort.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_dllnode	stack_utils.h	/^typedef struct s_dllnode t_dllnode;$/;"	t	typeref:struct:s_dllnode
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_stack	checker.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
t_stack	insertion_sort.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
t_stack	push_swap.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
t_stack	stack.h	/^} t_stack;$/;"	t	typeref:struct:s_stack
t_stack	stack_operations.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
t_stack	stack_rotate.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
t_stack	stack_sort.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
t_stack	stack_utils.h	/^typedef struct s_stack t_stack;$/;"	t	typeref:struct:s_stack
test	Makefile	/^test:			push_swap	$/;"	t
to_the_power_of	libft/ft_printf/ft_lutoa_base.c	/^static unsigned long	to_the_power_of(unsigned long n, unsigned long p)$/;"	f	typeref:typename:unsigned long	file:
top	checker.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	insertion_sort.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	push_swap.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	stack.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	stack_operations.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	stack_rotate.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	stack_sort.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
top	stack_utils.h	/^	t_dllnode *top;$/;"	m	struct:s_stack	typeref:typename:t_dllnode *
type	libft/ft_printf/ft_printf_utils.h	/^	int	type;$/;"	m	struct:s_parameters	typeref:typename:int
write_format	libft/ft_printf/format_utils.c	/^ssize_t		write_format(int fd,$/;"	f	typeref:typename:ssize_t
zero_flag	libft/ft_printf/ft_printf_utils.h	/^	int	zero_flag;$/;"	m	struct:s_parameters	typeref:typename:int
