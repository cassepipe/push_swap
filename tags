!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ENDCOLOR	checker.c	13;"	d	file:
ENDCOLOR	push_swap.c	14;"	d	file:
GREEN	checker.c	14;"	d	file:
GREEN	push_swap.c	15;"	d	file:
PRINT_ARRAY	checker.c	17;"	d	file:
PRINT_ARRAY	push_swap.c	18;"	d	file:
PRINT_ARRAY	raw_bit_sort.c	6;"	d	file:
PRINT_ARRAY_HEX	raw_bit_sort.c	16;"	d	file:
PRINT_INT_ARRAY	bit_sort_int.c	6;"	d	file:
PRINT_INT_ARRAY	custom_radix_sort.c	6;"	d	file:
PRINT_INT_ARRAY	radix_sort.c	5;"	d	file:
PRINT_INT_ARRAY_HEX	bit_sort_int.c	16;"	d	file:
PRINT_INT_ARRAY_HEX	custom_radix_sort.c	16;"	d	file:
PRINT_INT_ARRAY_HEX	radix_sort.c	15;"	d	file:
PRINT_TWO_STACKS	checker.c	23;"	d	file:
PRINT_TWO_STACKS	push_swap.c	24;"	d	file:
RED	checker.c	15;"	d	file:
RED	push_swap.c	16;"	d	file:
SWAP_BUFFERS	bit_sort_int.c	26;"	d	file:
SWAP_BUFFERS	custom_radix_sort.c	26;"	d	file:
SWAP_BUFFERS	radix_sort.c	25;"	d	file:
SWAP_BUFFERS	raw_bit_sort.c	26;"	d	file:
arrange_format	libft/ft_printf/format_utils.c	/^void		arrange_format(struct s_parameters *format)$/;"	f
array_member	custom_radix_sort.c	/^struct array_member {$/;"	s	file:
bit_sort	raw_bit_sort.c	/^unsigned long *bit_sort(unsigned long *input_array,$/;"	f
bit_sort_int	bit_sort_int.c	/^int *bit_sort_int(int *int_array, int nb_items, int nb_bits_to_sort)$/;"	f
bit_sort_int_pass	bit_sort_int.c	/^int *bit_sort_int_pass(int *input_array, int *output_array, int nb_items, int shift)$/;"	f
bit_sort_int_sign_bit	bit_sort_int.c	/^int *bit_sort_int_sign_bit(int *input_array, int *output_array, int nb_items)$/;"	f
bit_sort_pass	raw_bit_sort.c	/^static unsigned long	*bit_sort_pass(unsigned long *input_array,$/;"	f	file:
char_repr	libft/ft_printf/repr.c	/^char		*char_repr(unsigned char c,$/;"	f
check_dll_ordered	checker.c	/^bool	check_dll_ordered(t_dllnode **list)$/;"	f
diralloc	libft/ft_split.c	/^static char			**diralloc(const char *s, char c)$/;"	f	file:
dll_append	doubly_linked_lists.c	/^t_dllnode **dll_append(t_dllnode **head, t_dllnode *node)$/;"	f
dll_new_node	doubly_linked_lists.c	/^t_dllnode	*dll_new_node(int n)$/;"	f
dll_pop	doubly_linked_lists.c	/^t_dllnode	*dll_pop(t_dllnode **head)$/;"	f
dll_poppush	doubly_linked_lists.c	/^void	dll_poppush(t_dllnode **a, t_dllnode **b)$/;"	f
dll_push	doubly_linked_lists.c	/^void	dll_push(t_dllnode **dll, t_dllnode *node)$/;"	f
dll_revrotate	doubly_linked_lists.c	/^void	dll_revrotate(t_dllnode **head)$/;"	f
dll_rotate	doubly_linked_lists.c	/^void	dll_rotate(t_dllnode **head)$/;"	f
dll_swaptop	doubly_linked_lists.c	/^void	dll_swaptop(t_dllnode **head)$/;"	f
free_dll	doubly_linked_lists.c	/^void	free_dll(t_dllnode **list, int nmemb)$/;"	f
free_stack	stack.c	/^void	free_stack(t_stack *stack)$/;"	f
ft_10powerof	libft/ft_itoa.c	/^static long	ft_10powerof(long n)$/;"	f	file:
ft_10powerof	libft/ft_putnbr_fd.c	/^static long	ft_10powerof(long n)$/;"	f	file:
ft_atoi	libft/ft_atoi.c	/^int			ft_atoi(const char *nptr)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_dprintf	libft/ft_printf/ft_dprintf.c	/^int	ft_dprintf(int fd, const char *formatted_string, ...)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_lutoa_base	libft/ft_printf/ft_lutoa_base.c	/^char					*ft_lutoa_base(unsigned long n, const char *base_str)$/;"	f
ft_lutoa_format	libft/ft_printf/repr.c	/^static char	*ft_lutoa_format(long nbr, int type)$/;"	f	file:
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_printf	libft/ft_printf/ft_printf.c	/^int	ft_printf(const char *formatted_string, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char				**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_and_free	libft/ft_strjoin_and_free.c	/^char	*ft_strjoin_and_free(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *l, const char *r, size_t n)$/;"	f
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char		*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_vdprintf	libft/ft_printf/ft_vdprintf.c	/^int						ft_vdprintf(int fd, const char *fs, va_list args)$/;"	f
get_next_line	libft/get_next_line.c	/^int			get_next_line(int fd, char **line)$/;"	f
grow_buffer_until_newline	libft/get_next_line.c	/^static int	grow_buffer_until_newline(int fd, char **buffer,$/;"	f	file:
init_format	libft/ft_printf/format_utils.c	/^void		init_format(struct s_parameters *format)$/;"	f
is_in	libft/ft_printf/format_utils.c	/^int			is_in(char c, const char *charset)$/;"	f
is_in_set	libft/ft_strtrim.c	/^static int	is_in_set(char c, char const *set)$/;"	f	file:
leftpad	libft/ft_printf/pad.c	/^void	leftpad(char **str, char c, size_t n)$/;"	f
loop_exec_stack_ops	checker.c	/^void	loop_exec_stack_ops(t_stack *A, t_stack *B)$/;"	f
main	checker.c	/^int 	main(int argc, char **argv)$/;"	f
main	push_swap.c	/^int 	main(int argc, char **argv)$/;"	f
nbr_repr	libft/ft_printf/repr.c	/^char		*nbr_repr(long nbr, struct s_parameters *format, ssize_t *size)$/;"	f
new_int_array	new_int_array.c	/^int 	*new_int_array(int size)$/;"	f
new_stack	stack.c	/^t_stack *new_stack(t_dllnode *top, int size)$/;"	f
next	doubly_linked_lists.c	/^	struct s_dllnode	*next;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode::s_dllnode	file:
next_sep	libft/ft_split.c	/^static const char	*next_sep(const char *str, char sep)$/;"	f	file:
next_word	libft/ft_split.c	/^static const char	*next_word(const char *str, char sep)$/;"	f	file:
num	custom_radix_sort.c	/^	int	num;$/;"	m	struct:array_member	file:
num	doubly_linked_lists.c	/^	int				num;$/;"	m	struct:s_dllnode	file:
offset	custom_radix_sort.c	/^	int	offset;$/;"	m	struct:array_member	file:
operation	checker.c	/^	void (*operation)(t_dllnode **list);$/;"	m	struct:s_fat_token	file:
ord	custom_radix_sort.c	/^	int	ord;$/;"	m	struct:array_member	file:
parse_str_into_format	libft/ft_printf/format_utils.c	/^void		*parse_str_into_format(const char *fs,$/;"	f
prev	doubly_linked_lists.c	/^	struct s_dllnode	*prev;$/;"	m	struct:s_dllnode	typeref:struct:s_dllnode::s_dllnode	file:
print_dll	doubly_linked_lists.c	/^void	print_dll(t_dllnode **a, int size_a)$/;"	f
print_stack	stack.c	/^void	print_stack(t_stack stack)$/;"	f
print_two_stacks	stack.c	/^void	print_two_stacks(t_stack A, t_stack B)$/;"	f
ptr_repr	libft/ft_printf/repr.c	/^char		*ptr_repr(void *ptr, struct s_parameters *format, ssize_t *size)$/;"	f
put_array_ordered	push_swap.c	/^void  put_array_ordered(struct array_member *int_array, size_t size)$/;"	f
put_dll_ordered	checker.c	/^void	put_dll_ordered(t_dllnode **list)$/;"	f
radix_sort_int	custom_radix_sort.c	/^struct array_member *radix_sort_int(struct array_member *array, int nb_items)$/;"	f
radix_sort_int	radix_sort.c	/^int *radix_sort_int(int *int_array, int nb_items)$/;"	f
radix_sort_int_last_pass	custom_radix_sort.c	/^struct array_member *radix_sort_int_last_pass(struct array_member *input_array,$/;"	f
radix_sort_int_last_pass	radix_sort.c	/^int *radix_sort_int_last_pass(int *input_array, int *output_array, int nb_items,$/;"	f
radix_sort_int_pass	custom_radix_sort.c	/^struct array_member *radix_sort_int_pass(struct array_member *input_array,$/;"	f
radix_sort_int_pass	radix_sort.c	/^int *radix_sort_int_pass(int *input_array, int *output_array, int nb_items, int shift)$/;"	f
rightpad	libft/ft_printf/pad.c	/^void	rightpad(char **str, char c, size_t n)$/;"	f
s_dllnode	doubly_linked_lists.c	/^typedef struct	s_dllnode	{$/;"	s	file:
s_fat_token	checker.c	/^struct s_fat_token {$/;"	s	file:
s_stack	stack.c	/^typedef struct	s_stack	{$/;"	s	file:
size	stack.c	/^	int size;$/;"	m	struct:s_stack	file:
stack_append	stack.c	/^void	*stack_append(t_stack *stack, t_dllnode* node)$/;"	f
stack_pop	stack.c	/^t_dllnode	*stack_pop(t_stack *stack)$/;"	f
stack_poppush	stack.c	/^void	stack_poppush(t_stack *src, t_stack *dst)$/;"	f
stack_push	stack.c	/^void	stack_push(t_stack *stack, t_dllnode *node)$/;"	f
stack_revrotate	stack.c	/^void	stack_revrotate(t_stack *stack)$/;"	f
stack_rotate	stack.c	/^void	stack_rotate(t_stack *stack)$/;"	f
stack_swaptop	stack.c	/^void	stack_swaptop(t_stack *stack)$/;"	f
str_repr	libft/ft_printf/repr.c	/^char		*str_repr(char *s, struct s_parameters *format, ssize_t *size)$/;"	f
swap_buffers	raw_bit_sort.c	/^static void		swap_buffers(unsigned long **buff1, unsigned long **buff2)$/;"	f	file:
t_dllnode	doubly_linked_lists.c	/^} t_dllnode;$/;"	t	typeref:struct:s_dllnode	file:
t_stack	stack.c	/^} t_stack;$/;"	t	typeref:struct:s_stack	file:
to_the_power_of	libft/ft_printf/ft_lutoa_base.c	/^static unsigned long	to_the_power_of(unsigned long n, unsigned long p)$/;"	f	file:
token	checker.c	/^	char *token;$/;"	m	struct:s_fat_token	file:
top	stack.c	/^	t_dllnode *top;$/;"	m	struct:s_stack	file:
write_format	libft/ft_printf/format_utils.c	/^ssize_t		write_format(int fd,$/;"	f
